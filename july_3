Test2 Discussion..
===================
Number reprsentation
--------------------
numbers and their representation is complex.

integers : Mathematical set of integers,size :infinite

000 => 0
111 => 7

size of integers on a 32 bit.

int i; sizeof(i) ->4 bytes:32bits

"Overflow", integer overflow -> rocket crashes

Real numbers :Float/double

float i;
double i;
i=0.0;
000000......0
000000......1

Real numbers are represented as bit patterns using an IEEE standard.

		  finite
		  *     *
integers :	0 1 2 3 4 5 ........
		------------------->


		infinite
		*     *
Real numbers:	0.1 0.2
		--------------------->

float i;32bits
double i;64bits

2.00000009 ->"Approximations" is needed for real numbers.

Real number concepts are simply complex.

highest 16bit unsigned number -> 65535.

Key to manipulating bit patterns is "Pattern recognition".

2's complement representation for signed numbers.

int i -> 4 bits long

0111 ->	7
0110 ->	6
0101 ->	5
0100 ->	4
0011 ->	3 
0010 ->	2 
0001 ->	1 
0000 ->	0 
1111 ->	-1
1110 -> -2
1101 -> -3
1100 -> -4
1011 -> -5
1010 -> -6
1001 -> -7
1000 -> -8

signed 	-1 -> 0001
	      1110
	      1111

	-2 -> 0010	
	   -> 1101
	   -> 1110

"interpretation" -> printf("%d",-1) -> -1 -> 11111......1

printf interprets this pattern as a signed number.
 
%x,-1 => 0xffffffff
|
v
for unsigned

4294967295 -> maximum +ve value in 32bit

2^(N-1)-1 ->maximum postive value 7

java binary search -> a((i+j)/2), bug remains for many years. because values they dealt for i and j were small probably.

unsigned integers are overflows to 0.

main()
{
 unsigned int i;
 i=0xffffffff;
 printf("%x\n",i+1);
}

 1111
    1
------
10000 ,only store 0000 then print 0
 ----

bit manipulation
----------------
a) data structures: bit vectors
b) low level programing
------------------------------------
